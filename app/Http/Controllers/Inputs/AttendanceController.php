<?php

namespace App\Http\Controllers\Inputs;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Validation\Rule;
use App\Models\Attendance;
use App\Models\Student;
use App\Models\Teacher;
use App\Models\Staff;

class AttendanceController extends Controller
{
    public function index(Request $request)
    {
        // ููุงุชุฑ ุจุณูุทุฉ ููุนุฑุถ
        $role      = $request->input('role');         // student/teacher/staff
        $person_id = $request->input('person_id');    // ID ูู ุฌุฏูู ุงูุฏูุฑ
        $from      = $request->input('from');         // ุชุงุฑูุฎ ูู
        $to        = $request->input('to');           // ุชุงุฑูุฎ ุฅูู

        // ููุญููู ุงูุงูุชุฑุงุถูุฉ ุนูุฏ ุงูุฅุฏุฎุงู
        $term = $request->input('term', 'ุงููุตู ุงูุฃูู');
        $year = (int) $request->input('year', now()->year);
        $date = $request->input('date', now()->format('Y-m-d'));

        // ููุงุฆู ุงูุงุฎุชูุงุฑ
        $students = Student::orderBy('student_name')->get(['id','student_name']);
        $teachers = class_exists(Teacher::class)
            ? Teacher::orderBy('name')->get(['id','name'])
            : collect();
        $staff    = class_exists(Staff::class)
            ? Staff::orderBy('name')->get(['id','name'])
            : collect();

        // ุนุฑุถ ุงูุณุฌูุงุช
        $q = Attendance::query()->latest('date')->latest('id');
        if ($role)      $q->where('role', $role);
        if ($person_id) $q->where('person_id', $person_id);
        if ($from && $to) $q->whereBetween('date', [$from, $to]);

        $records = $q->paginate(15);

        return view('pages.inputs.attendance', compact(
            'students','teachers','staff',
            'records','role','person_id','term','year','date','from','to'
        ));
    }

    public function store(Request $request)
    {
        $role = $request->input('role');

        // ุชุญูู ูุดุฑูุท ููุฌูุฏ ุงูุดุฎุต ูู ุงูุฌุฏูู ุงูุตุญูุญ
        $personRule = ['required','integer'];
        if ($role === 'student') {
            $personRule[] = Rule::exists('students','id');
        } elseif ($role === 'teacher') {
            $personRule[] = Rule::exists('teachers','id');
        } elseif ($role === 'staff') {
            $personRule[] = Rule::exists('staff','id');
        }

        $data = $request->validate([
            'role'      => ['required', Rule::in(['student','teacher','staff'])],
            'person_id' => $personRule,
            'date'      => ['required','date'],
            'term'      => ['nullable','string','max:20'], // ุงููุตู ุงูุฃูู/ุงูุซุงูู
            'year'      => ['nullable','integer','min:2000','max:2100'],
            'status'    => ['required', Rule::in(['ุญุงุถุฑ','ุบุงุฆุจ','ูุชุฃุฎุฑ','ูุฃุฐูู'])],
            'notes'     => ['nullable','string'],
        ], [
            'role.required'      => 'ุญุฏุฏ ููุน ุงูุญุถูุฑ (ุทุงูุจ/ูุนูู/ููุธู).',
            'person_id.required' => 'ุงุฎุชุฑ ุงูุดุฎุต.',
            'date.required'      => 'ุญุฏุฏ ุชุงุฑูุฎ ุงูุญุถูุฑ.',
            'status.required'    => 'ุงุฎุชุฑ ุญุงูุฉ ุงูุญุถูุฑ.',
        ]);

        // ุญูุธ/ุชุนุฏูู ุจุฏูู ุชูุฑุงุฑ ูููุณ ุงูููู
        Attendance::updateOrCreate(
            [
                'role'      => $data['role'],
                'person_id' => $data['person_id'],
                'date'      => $data['date'],
            ],
            [
                'term'      => $data['term'] ?? null,
                'year'      => $data['year'] ?? null,
                'status'    => $data['status'],
                'notes'     => $data['notes'] ?? null,
                'created_by'=> auth()->id(),
            ]
        );

        return back()->with('success','ุชู ุงูุญูุธ / ุงูุชุนุฏูู ุจูุฌุงุญ โ');
    }

    public function destroy(Attendance $attendance)
    {
        $attendance->delete();
        return back()->with('success','ุชู ุญุฐู ุงูุณุฌู ๐๏ธ');
    }
}
